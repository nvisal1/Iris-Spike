{"version":3,"sources":["components/search.js","components/images.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchComponent","state","term","onFormSubmit","event","preventDefault","_this","props","onSubmit","onChange","setState","target","value","react_default","a","createElement","class","this","type","placeholder","React","Component","ImageComponent","override","css","_templateObject","images","length","map","image","key","id","alt","src","thumbnails","uri","onClick","window","open","gameClipUris","titleName","className","loading","react_spinners","size","margin","color","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","searchClips","_ref","asyncToGenerator","regenerator_default","mark","_callee","gamertag","val","wrap","_context","prev","next","axios","get","encodeURI","sent","stop","_x","apply","arguments","search","input","document","querySelector","addEventListener","e","classList","toggle","add","remove","src_components_images","Boolean","location","hostname","match","ReactDOM","render","components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72ae309b.chunk.js","sourcesContent":["import React from 'react';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\n\nclass SearchComponent extends React.Component {\n\n  state = { term: '' }\n\n  onFormSubmit = event => {\n    event.preventDefault();\n    this.props.onSubmit(this.state.term);\n  }\n\n  onChange = event => {\n    this.setState({term: event.target.value});\n  }\n\n  render() {\n      return (\n          <div>\n            <div class=\"heading\">\n              <div class=\"search-container\">\n                <div class=\"search-form\">\n                  <form onSubmit={this.onFormSubmit}>\n                    <input \n                      type=\"text\" \n                      value={this.state.term}\n                      placeholder=\"Your Gamertag\"\n                      onChange={this.onChange}\n                    >\n                    </input>\n                    <button></button>\n                  </form>\n                </div> \n              </div>\n              Iris spike\n            </div>\n          </div>\n      );\n  }\n};\nexport default SearchComponent;\n","import React from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { css } from '@emotion/core';\nimport './images.css';\n\nclass ImageComponent extends React.Component {\n\n    render() {\n        const override = css`\n            display: block;\n            margin: 0 auto;\n            border-color: red;\n        `;\n\n        if (this.props.images.length > 0) {\n            const images = this.props.images.map((image) => {\n                return (\n                    <div key={image.id} >\n                        <img alt='' src={image.thumbnails[0].uri} onClick={() => window.open(image.gameClipUris[0].uri)}></img>\n                        <p>{image.titleName}</p>\n                    </div>\n                )\n            })\n            return <div className=\"image-list\">{images}</div>\n        }\n        else if (this.props.loading) {\n           return (\n                <div className='sweet-loading spinner'>\n                    <ClipLoader\n                        css={override}\n                        size={300}\n                        margin={2}\n                        color={'#123abc'}\n                        loading={this.props.loading}\n                    />\n                </div> \n            )\n        } else {\n            return (\n                <div className=\"text\">\n                    Iris Spike is a proof of concept for a personal project. The purpose of this app is to allow users to easily find and share xbox game clips.\n                </div>\n            )\n        }\n    }\n}\n\nexport default ImageComponent;","import React, { Component } from 'react';\nimport '../App.css';\nimport axios from 'axios';\nimport SearchComponent from './search'\nimport ImageComponent from './images';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = { search: false, loading: false, images: []};\n  }\n\n  searchClips = async(gamertag) => {\n    this.setState({ loading: true });\n    const val = await axios.get('https://damp-chamber-98722.herokuapp.com/xbox/clips/' + encodeURI(gamertag));\n    this.setState({ loading: false });\n    this.setState({images: val['data']});\n  }\n\n\n  componentDidMount() {\n    var input = document.querySelector('.search-form');\n    var search = document.querySelector('input')\n    var button = document.querySelector('button');\n\n    button.addEventListener('mouseover', function(e) {\n      e.preventDefault();\n      input.classList.toggle('active');\n    })\n\n    search.addEventListener('focus', function() {\n      input.classList.add('focus')\n    })\n\n    search.addEventListener('blur', function() {\n      search.value.length !== 0 ? input.classList.add('focus') : input.classList.remove('focus');\n    })\n    \n  }\n\n  render() {\n    return(\n      <div>\n        <SearchComponent onSubmit={this.searchClips}/>\n        <ImageComponent images={this.state.images} loading={this.state.loading}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}